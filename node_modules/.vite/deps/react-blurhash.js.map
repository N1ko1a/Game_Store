{
  "version": 3,
  "sources": ["../../react-blurhash/src/Blurhash.tsx", "../../react-blurhash/src/BlurhashCanvas.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport BlurhashCanvas from './BlurhashCanvas';\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  hash: string;\n  /** CSS height, default: 128 */\n  height?: number | string | 'auto';\n  punch?: number;\n  resolutionX?: number;\n  resolutionY?: number;\n  style?: React.CSSProperties;\n  /** CSS width, default: 128 */\n  width?: number | string | 'auto';\n};\n\nconst canvasStyle: React.CSSProperties = {\n  position: 'absolute',\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  width: '100%',\n  height: '100%',\n};\n\nexport default class Blurhash extends React.PureComponent<Props> {\n  static defaultProps = {\n    height: 128,\n    width: 128,\n    resolutionX: 32,\n    resolutionY: 32,\n  };\n\n  componentDidUpdate() {\n    if (this.props.resolutionX <= 0) {\n      throw new Error('resolutionX must be larger than zero');\n    }\n\n    if (this.props.resolutionY <= 0) {\n      throw new Error('resolutionY must be larger than zero');\n    }\n  }\n\n  render() {\n    const { hash, height, width, punch, resolutionX, resolutionY, style, ...rest } = this.props;\n\n    return (\n      <div\n        {...rest}\n        style={{ display: 'inline-block', height, width, ...style, position: 'relative' }}\n      >\n        <BlurhashCanvas\n          hash={hash}\n          height={resolutionY}\n          width={resolutionX}\n          punch={punch}\n          style={canvasStyle}\n        />\n      </div>\n    );\n  }\n}\n", "import * as React from 'react';\nimport { decode } from 'blurhash';\n\nexport type Props = React.CanvasHTMLAttributes<HTMLCanvasElement> & {\n  hash: string;\n  height?: number;\n  punch?: number;\n  width?: number;\n};\n\nexport default class BlurhashCanvas extends React.PureComponent<Props> {\n  static defaultProps = {\n    height: 128,\n    width: 128,\n  };\n\n  canvas: HTMLCanvasElement = null;\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  handleRef = (canvas: HTMLCanvasElement) => {\n    this.canvas = canvas;\n    this.draw();\n  };\n\n  draw = () => {\n    const { hash, height, punch, width } = this.props;\n\n    if (this.canvas) {\n      const pixels = decode(hash, width, height, punch);\n\n      const ctx = this.canvas.getContext('2d');\n      const imageData = ctx.createImageData(width, height);\n      imageData.data.set(pixels);\n      ctx.putImageData(imageData, 0, 0);\n    }\n  };\n\n  render() {\n    const { hash, height, width, ...rest } = this.props;\n\n    return <canvas {...rest} height={height} width={width} ref={this.handleRef} />;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA,QAAuB;ACAvB,QAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;AAUvB,IAAqBA,IAArB,cAAkD,gBAAqB;EAAvE,cAAA;AAAA,UAAA,GAAA,SAAA;AAME,SAAA,SAA4B;AAM5B,SAAA,YAAaC,OAA8B;AACzC,WAAK,SAASA,GACd,KAAK,KAAK;IACZ;AAEA,SAAA,OAAO,MAAM;AACX,UAAM,EAAE,MAAAC,GAAM,QAAAC,GAAQ,OAAAC,GAAO,OAAAC,EAAM,IAAI,KAAK;AAE5C,UAAI,KAAK,QAAQ;AACf,YAAMC,IAASC,EAAOL,GAAMG,GAAOF,GAAQC,CAAK,GAE1CI,IAAM,KAAK,OAAO,WAAW,IAAI,GACjCC,IAAYD,EAAI,gBAAgBH,GAAOF,CAAM;AACnDM,UAAU,KAAK,IAAIH,CAAM,GACzBE,EAAI,aAAaC,GAAW,GAAG,CAAC;MAClC;IACF;EAAA;EApBA,qBAAqB;AACnB,SAAK,KAAK;EACZ;EAoBA,SAAS;AACP,QAAyCC,IAAA,KAAK,OAAtC,EAAA,MAAAR,GAAM,QAAAC,GAAQ,OAAAE,EAzC1B,IAyC6CK,GAATC,IAAAC,EAASF,GAAT,CAAxB,QAAM,UAAQ,OAAA,CAAA;AAEtB,WAAO,gBAAC,UAAAG,EAAAC,EAAA,CAAA,GAAWH,CAAAA,GAAX,EAAiB,QAAQR,GAAQ,OAAOE,GAAO,KAAK,KAAK,UAAA,CAAA,CAAW;EAC9E;AACF;AAnCqBL,EACZ,eAAe,EACpB,QAAQ,KACR,OAAO,IACT;ADEF,IAAMe,IAAmC,EACvC,UAAU,YACV,KAAK,GACL,QAAQ,GACR,MAAM,GACN,OAAO,GACP,OAAO,QACP,QAAQ,OACV;AARA,IAUqBC,IAArB,cAA4C,gBAAqB;EAQ/D,qBAAqB;AACnB,QAAI,KAAK,MAAM,eAAe;AAC5B,YAAM,IAAI,MAAM,sCAAsC;AAGxD,QAAI,KAAK,MAAM,eAAe;AAC5B,YAAM,IAAI,MAAM,sCAAsC;EAE1D;EAEA,SAAS;AACP,QAAiFN,IAAA,KAAK,OAA9E,EAAA,MAAAR,GAAM,QAAAC,GAAQ,OAAAE,GAAO,OAAAD,GAAO,aAAAa,GAAa,aAAAC,GAAa,OAAAC,EA7ClE,IA6CqFT,GAATC,IAAAC,EAASF,GAAT,CAAhE,QAAM,UAAQ,SAAO,SAAO,eAAa,eAAa,OAAA,CAAA;AAE9D,WACE,gBAAC,OAAAG,EAAAC,EAAA,CAAA,GACKH,CAAAA,GADL,EAEC,OAAOE,EAAAC,EAAA,EAAE,SAAS,gBAAgB,QAAAX,GAAQ,OAAAE,EAAAA,GAAUc,CAAAA,GAA7C,EAAoD,UAAU,WAAW,CAAA,EAAA,CAAA,GAEhF,gBAACnB,GAAA,EACC,MAAME,GACN,QAAQgB,GACR,OAAOD,GACP,OAAOb,GACP,OAAOW,EAAAA,CACT,CACF;EAEJ;AACF;AApCqBC,EACZ,eAAe,EACpB,QAAQ,KACR,OAAO,KACP,aAAa,IACb,aAAa,GACf;",
  "names": ["BlurhashCanvas", "canvas", "hash", "height", "punch", "width", "pixels", "decode", "ctx", "imageData", "_a", "rest", "__objRest", "__spreadProps", "__spreadValues", "canvasStyle", "Blurhash", "resolutionX", "resolutionY", "style"]
}

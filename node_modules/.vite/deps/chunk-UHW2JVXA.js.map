{
  "version": 3,
  "sources": ["../../blurhash/src/base83.ts", "../../blurhash/src/utils.ts", "../../blurhash/src/error.ts", "../../blurhash/src/decode.ts", "../../blurhash/src/encode.ts"],
  "sourcesContent": ["const digitCharacters = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n  \"#\",\n  \"$\",\n  \"%\",\n  \"*\",\n  \"+\",\n  \",\",\n  \"-\",\n  \".\",\n  \":\",\n  \";\",\n  \"=\",\n  \"?\",\n  \"@\",\n  \"[\",\n  \"]\",\n  \"^\",\n  \"_\",\n  \"{\",\n  \"|\",\n  \"}\",\n  \"~\",\n];\n\nexport const decode83 = (str: String) => {\n  let value = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str[i];\n    const digit = digitCharacters.indexOf(c);\n    value = value * 83 + digit;\n  }\n  return value;\n};\n\nexport const encode83 = (n: number, length: number): string => {\n  var result = \"\";\n  for (let i = 1; i <= length; i++) {\n    let digit = (Math.floor(n) / Math.pow(83, length - i)) % 83;\n    result += digitCharacters[Math.floor(digit)];\n  }\n  return result;\n};\n", "export const sRGBToLinear = (value: number) => {\n  let v = value / 255;\n  if (v <= 0.04045) {\n    return v / 12.92;\n  } else {\n    return Math.pow((v + 0.055) / 1.055, 2.4);\n  }\n};\n\nexport const linearTosRGB = (value: number) => {\n  let v = Math.max(0, Math.min(1, value));\n  if (v <= 0.0031308) {\n    return Math.trunc(v * 12.92 * 255 + 0.5);\n  } else {\n    return Math.trunc((1.055 * Math.pow(v, 1 / 2.4) - 0.055) * 255 + 0.5);\n  }\n};\n\nexport const sign = (n: number) => (n < 0 ? -1 : 1);\n\nexport const signPow = (val: number, exp: number) =>\n  sign(val) * Math.pow(Math.abs(val), exp);\n", "export class ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"ValidationError\";\n    this.message = message;\n  }\n}\n", "import { decode83 } from \"./base83\";\nimport { sRGBToLinear, signPow, linearTosRGB } from \"./utils\";\nimport { ValidationError } from \"./error\";\n\n/**\n * Returns an error message if invalid or undefined if valid\n * @param blurhash\n */\nconst validateBlurhash = (blurhash: string) => {\n  if (!blurhash || blurhash.length < 6) {\n    throw new ValidationError(\n      \"The blurhash string must be at least 6 characters\"\n    );\n  }\n\n  const sizeFlag = decode83(blurhash[0]);\n  const numY = Math.floor(sizeFlag / 9) + 1;\n  const numX = (sizeFlag % 9) + 1;\n\n  if (blurhash.length !== 4 + 2 * numX * numY) {\n    throw new ValidationError(\n      `blurhash length mismatch: length is ${\n        blurhash.length\n      } but it should be ${4 + 2 * numX * numY}`\n    );\n  }\n};\n\nexport const isBlurhashValid = (\n  blurhash: string\n): { result: boolean; errorReason?: string } => {\n  try {\n    validateBlurhash(blurhash);\n  } catch (error) {\n    return { result: false, errorReason: error.message };\n  }\n\n  return { result: true };\n};\n\nconst decodeDC = (value: number) => {\n  const intR = value >> 16;\n  const intG = (value >> 8) & 255;\n  const intB = value & 255;\n  return [sRGBToLinear(intR), sRGBToLinear(intG), sRGBToLinear(intB)];\n};\n\nconst decodeAC = (value: number, maximumValue: number) => {\n  const quantR = Math.floor(value / (19 * 19));\n  const quantG = Math.floor(value / 19) % 19;\n  const quantB = value % 19;\n\n  const rgb = [\n    signPow((quantR - 9) / 9, 2.0) * maximumValue,\n    signPow((quantG - 9) / 9, 2.0) * maximumValue,\n    signPow((quantB - 9) / 9, 2.0) * maximumValue,\n  ];\n\n  return rgb;\n};\n\nconst decode = (\n  blurhash: string,\n  width: number,\n  height: number,\n  punch?: number\n) => {\n  validateBlurhash(blurhash);\n\n  punch = punch | 1;\n\n  const sizeFlag = decode83(blurhash[0]);\n  const numY = Math.floor(sizeFlag / 9) + 1;\n  const numX = (sizeFlag % 9) + 1;\n\n  const quantisedMaximumValue = decode83(blurhash[1]);\n  const maximumValue = (quantisedMaximumValue + 1) / 166;\n\n  const colors = new Array(numX * numY);\n\n  for (let i = 0; i < colors.length; i++) {\n    if (i === 0) {\n      const value = decode83(blurhash.substring(2, 6));\n      colors[i] = decodeDC(value);\n    } else {\n      const value = decode83(blurhash.substring(4 + i * 2, 6 + i * 2));\n      colors[i] = decodeAC(value, maximumValue * punch);\n    }\n  }\n\n  const bytesPerRow = width * 4;\n  const pixels = new Uint8ClampedArray(bytesPerRow * height);\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      let r = 0;\n      let g = 0;\n      let b = 0;\n\n      for (let j = 0; j < numY; j++) {\n        for (let i = 0; i < numX; i++) {\n          const basis =\n            Math.cos((Math.PI * x * i) / width) *\n            Math.cos((Math.PI * y * j) / height);\n          let color = colors[i + j * numX];\n          r += color[0] * basis;\n          g += color[1] * basis;\n          b += color[2] * basis;\n        }\n      }\n\n      let intR = linearTosRGB(r);\n      let intG = linearTosRGB(g);\n      let intB = linearTosRGB(b);\n\n      pixels[4 * x + 0 + y * bytesPerRow] = intR;\n      pixels[4 * x + 1 + y * bytesPerRow] = intG;\n      pixels[4 * x + 2 + y * bytesPerRow] = intB;\n      pixels[4 * x + 3 + y * bytesPerRow] = 255; // alpha\n    }\n  }\n  return pixels;\n};\n\nexport default decode;\n", "import { encode83 } from \"./base83\";\nimport { sRGBToLinear, signPow, linearTosRGB } from \"./utils\";\nimport { ValidationError } from \"./error\";\n\ntype NumberTriplet = [number, number, number];\n\nconst bytesPerPixel = 4;\n\nconst multiplyBasisFunction = (\n  pixels: Uint8ClampedArray,\n  width: number,\n  height: number,\n  basisFunction: (i: number, j: number) => number\n): NumberTriplet => {\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  const bytesPerRow = width * bytesPerPixel;\n\n  for (let x = 0; x < width; x++) {\n    const bytesPerPixelX = bytesPerPixel * x;\n\n    for (let y = 0; y < height; y++) {\n      const basePixelIndex = bytesPerPixelX + y * bytesPerRow;\n      const basis = basisFunction(x, y);\n      r +=\n        basis * sRGBToLinear(pixels[basePixelIndex]);\n      g +=\n        basis * sRGBToLinear(pixels[basePixelIndex + 1]);\n      b +=\n        basis * sRGBToLinear(pixels[basePixelIndex + 2]);\n    }\n  }\n\n  let scale = 1 / (width * height);\n\n  return [r * scale, g * scale, b * scale];\n};\n\nconst encodeDC = (value: NumberTriplet): number => {\n  const roundedR = linearTosRGB(value[0]);\n  const roundedG = linearTosRGB(value[1]);\n  const roundedB = linearTosRGB(value[2]);\n  return (roundedR << 16) + (roundedG << 8) + roundedB;\n};\n\nconst encodeAC = (value: NumberTriplet, maximumValue: number): number => {\n  let quantR = Math.floor(\n    Math.max(\n      0,\n      Math.min(18, Math.floor(signPow(value[0] / maximumValue, 0.5) * 9 + 9.5))\n    )\n  );\n  let quantG = Math.floor(\n    Math.max(\n      0,\n      Math.min(18, Math.floor(signPow(value[1] / maximumValue, 0.5) * 9 + 9.5))\n    )\n  );\n  let quantB = Math.floor(\n    Math.max(\n      0,\n      Math.min(18, Math.floor(signPow(value[2] / maximumValue, 0.5) * 9 + 9.5))\n    )\n  );\n\n  return quantR * 19 * 19 + quantG * 19 + quantB;\n};\n\nconst encode = (\n  pixels: Uint8ClampedArray,\n  width: number,\n  height: number,\n  componentX: number,\n  componentY: number\n): string => {\n  if (componentX < 1 || componentX > 9 || componentY < 1 || componentY > 9) {\n    throw new ValidationError(\"BlurHash must have between 1 and 9 components\");\n  }\n  if (width * height * 4 !== pixels.length) {\n    throw new ValidationError(\"Width and height must match the pixels array\");\n  }\n\n  let factors: Array<[number, number, number]> = [];\n  for (let y = 0; y < componentY; y++) {\n    for (let x = 0; x < componentX; x++) {\n      const normalisation = x == 0 && y == 0 ? 1 : 2;\n      const factor = multiplyBasisFunction(\n        pixels,\n        width,\n        height,\n        (i: number, j: number) =>\n          normalisation *\n          Math.cos((Math.PI * x * i) / width) *\n          Math.cos((Math.PI * y * j) / height)\n      );\n      factors.push(factor);\n    }\n  }\n\n  const dc = factors[0];\n  const ac = factors.slice(1);\n\n  let hash = \"\";\n\n  let sizeFlag = componentX - 1 + (componentY - 1) * 9;\n  hash += encode83(sizeFlag, 1);\n\n  let maximumValue: number;\n  if (ac.length > 0) {\n    let actualMaximumValue = Math.max(...ac.map((val) => Math.max(...val)));\n    let quantisedMaximumValue = Math.floor(\n      Math.max(0, Math.min(82, Math.floor(actualMaximumValue * 166 - 0.5)))\n    );\n    maximumValue = (quantisedMaximumValue + 1) / 166;\n    hash += encode83(quantisedMaximumValue, 1);\n  } else {\n    maximumValue = 1;\n    hash += encode83(0, 1);\n  }\n\n  hash += encode83(encodeDC(dc), 4);\n\n  ac.forEach((factor) => {\n    hash += encode83(encodeAC(factor, maximumValue), 2);\n  });\n\n  return hash;\n};\n\nexport default encode;\n"],
  "mappings": "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",
  "names": []
}
